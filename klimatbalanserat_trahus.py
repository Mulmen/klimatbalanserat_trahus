import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Klimatbalanserat tr√§hus", layout="wide")

st.title("üå≤ Klimatbalanserat tr√§hus ‚Äì dynamisk modell. Ver 0.4")
st.markdown("""
Modellera klimatnyttan av att bygga tr√§hus och plantera produktiv skog!
Justera parametrar, analysera CO‚ÇÇ-bindning, och v√§lj vad som sker n√§r huset rivs.
""")

# --- SIDOPANEL: ANV√ÑNDARVAL & DEFAULTS ---
st.sidebar.header("Justera modellparametrar")

BTA = st.sidebar.slider("Bostadsyta (BTA), m¬≤", 100, 10000, 150)
virke_per_m2 = st.sidebar.slider("M√§ngd stomvirke (m¬≥/m¬≤ BTA)", 0.1, 1.0, 0.35)
bonitet = st.sidebar.slider("Bonitet gran (T/ha/√•r)", 4, 10, 8)
LCA_period = st.sidebar.slider("LCA-period (√•r, analys)", 30, 100, 50)
rotation = st.sidebar.slider("Skogens rotationsperiod (√•r)", 50, 150, 80)
hus_livslangd = st.sidebar.slider("Husets livsl√§ngd (√•r)", 20, 200, 100)
max_years = st.sidebar.slider("Total tidsperiod (√•r)", 50, 200, 200)

klimatp√•verkan_per_m2 = st.sidebar.slider(
    "Husets klimatp√•verkan (ton CO‚ÇÇ/m¬≤ BTA)", 0.150, 0.500, 0.250
)

virkes_hantering = st.sidebar.selectbox(
    "Vad h√§nder med virket efter husets rivning?",
    (
        "√Öteranv√§nds till nytt hus",
        "Energi√•tervinns med bio-CCS (koldioxidlagring)",
        "Br√§nns konventionellt (sl√§pper ut all CO‚ÇÇ)"
    ),
    index=0
)

bygg_igen = st.sidebar.checkbox("Bygg nytt hus efter livsl√§ngd?", value=True)

years = np.arange(max_years+1)

# --- FAKTA / OMFATTNING ---
kg_torrsubstans_per_m3 = 750
kolandel = 0.5
co2_per_kg_kol = 3.67

virkesvolym_total = BTA * virke_per_m2
kol_total = virkesvolym_total * kg_torrsubstans_per_m3 * kolandel
co2_total = kol_total * co2_per_kg_kol / 1000

tillvaxt_skogen_m3_per_ha_ar = bonitet
co2_per_m3 = kg_torrsubstans_per_m3 * kolandel * co2_per_kg_kol / 1000

skogsareal_ha = co2_total / (tillvaxt_skogen_m3_per_ha_ar * co2_per_m3 * rotation)

# --- HUSETS TOTALA KLIMATBELASTNING ---
klimatp√•verkan_total = BTA * klimatp√•verkan_per_m2  # ton CO‚ÇÇ

# --- SIMULERING ---
co2_i_skog = np.zeros_like(years, dtype=float)
co2_i_hus = np.zeros_like(years, dtype=float)

for t in years:
    # Skog: ackumulerar CO2 linj√§rt varje rotation, nollst√§lls vid avverkning
    tid_i_rotation = t % rotation
    co2_i_skog[t] = skogsareal_ha * tillvaxt_skogen_m3_per_ha_ar * co2_per_m3 * tid_i_rotation

    tid_i_hus = t % hus_livslangd

    if virkes_hantering == "√Öteranv√§nds till nytt hus":
        co2_i_hus[t] = co2_total
    else:
        if bygg_igen:
            if tid_i_hus == 0 and t != 0:
                co2_i_hus[t] = 0
            else:
                co2_i_hus[t] = co2_total
        else:
            if t < hus_livslangd:
                co2_i_hus[t] = co2_total
            elif t == hus_livslangd:
                co2_i_hus[t] = 0
            else:
                co2_i_hus[t] = 0

# --- Klimatneutralitet (%) ---
klimatneutralitet = np.zeros_like(years, dtype=float)
for t in years:
    if klimatp√•verkan_total > 0:
        klimatneutralitet[t] = 100 * co2_i_skog[t] / klimatp√•verkan_total
    else:
        klimatneutralitet[t] = np.nan

kumulativt_netto = co2_i_skog - co2_i_hus

fig1, ax1 = plt.subplots(figsize=(8, 4))
ax1.plot(years, co2_i_hus, label="Inbyggd CO‚ÇÇ i tr√§hus (ton)", lw=2)
ax1.plot(years, co2_i_skog, label="Ackumulerad CO‚ÇÇ i skog (ton)", lw=2)
ax1.axvline(LCA_period, color='red', linestyle=':', label='LCA-period slutar')
for n in range(0, max_years, rotation):
    ax1.axvline(n, color='green', linestyle='--', alpha=0.2)
for n in range(0, max_years, hus_livslangd):
    ax1.axvline(n, color='brown', linestyle=':', alpha=0.2)
ax1.set_xlabel("Tid (√•r)")
ax1.set_ylabel("Ton CO‚ÇÇ")
ax1.set_title("CO‚ÇÇ-lagring i hus och skog")
ax1.legend()
ax1.grid(alpha=0.3)

fig2, ax2 = plt.subplots(figsize=(8, 4))
ax2.plot(years, klimatneutralitet, label="Klimatneutralitetsgrad (%)", lw=2, color="purple")
ax2.axhline(100, color='gray', linestyle='--', label="100% klimatbalans")
ax2.set_xlabel("Tid (√•r)")
ax2.set_ylabel("Klimatneutralitetsgrad (%)")
ax2.set_ylim(0, 150)
ax2.set_title("Klimatneutralitet √∂ver tid (skogsupptag/klimatp√•verkan)")
ax2.legend()
ax2.grid(alpha=0.3)

fig3, ax3 = plt.subplots(figsize=(8, 4))
ax3.plot(years, kumulativt_netto, label="Kumulativt netto (skog - hus) [ton CO‚ÇÇ]", lw=2, color="teal")
ax3.axhline(0, color='gray', linestyle='--', label="Noll-linje")
ax3.set_xlabel("Tid (√•r)")
ax3.set_ylabel("Ton CO‚ÇÇ")
ax3.set_title("Kumulativt netto: skogsupptag minus lagrat i hus")
ax3.legend()
ax3.grid(alpha=0.3)

st.subheader("CO‚ÇÇ-lagring i tr√§hus och produktiv skog √∂ver tid")
st.pyplot(fig1)
st.subheader("Klimatneutralitetsgrad f√∂r tr√§hus √∂ver tid (skogsupptag/klimatp√•verkan)")
st.pyplot(fig2)
st.subheader("Kumulativt netto ‚Äì skillnad mellan skogsupptag och inbyggd CO‚ÇÇ i hus")
st.pyplot(fig3)

with st.expander("Vetenskaplig bakgrund & k√§llor"):
    st.markdown("""
    - Omvandlingsfaktor: 1 m¬≥ virke = 750 kg torrsubstans (50% kol), 1 kg C = 3,67 kg CO‚ÇÇ.
    - Bonitet: Tillv√§xt i m¬≥/ha/√•r enligt Skogsstyrelsen och SLU, t.ex. https://www.skogsstyrelsen.se.
    - Klimatneutralitetsgrad = (ackumulerad CO‚ÇÇ i skog / husets totala klimatp√•verkan) √ó 100.
    - Ackumulerad CO‚ÇÇ i skog nollst√§lls vid varje ny skogsrotation.
    - Hantering av virke vid rivning styr fortsatt kolinlagring (se IVL/SLU-rapporter).
    """)

st.markdown("""
<small>Utvecklad av [Johan Holmqvist/IVL]. Kod p√• [GitHub repository](https://github.com/Mulmen/klimatbalanserat_trahus).</small>
""", unsafe_allow_html=True)
